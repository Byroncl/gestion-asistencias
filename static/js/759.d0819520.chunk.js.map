{"version":3,"file":"static/js/759.d0819520.chunk.js","mappings":"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","sources":["components/registro/registroUsuario.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../../assets/css/registro.css';\r\n\r\nconst Register: React.FC = () => {\r\n    const [nombres, setNombres] = useState('');\r\n    const [apellidos, setApellidos] = useState('');\r\n    const [correo, setCorreo] = useState('');\r\n    const [contraseña, setContraseña] = useState('');\r\n    const [confirmarContraseña, setConfirmarContraseña] = useState('');\r\n    const [cedula, setCedula] = useState('');\r\n    const [facultad, setFacultad] = useState('');\r\n\r\n    const [errores, setErrores] = useState({\r\n        nombres: '',\r\n        apellidos: '',\r\n        correo: '',\r\n        contraseña: '',\r\n        confirmarContraseña: '',\r\n        cedula: '',\r\n        facultad: '',\r\n    });\r\n\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n\r\n        if (formValido()) {\r\n            const user = { nombres, apellidos, correo, contraseña, cedula, facultad };\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n            alert('Usuario registrado con éxito');\r\n        } else {\r\n            alert('Por favor complete correctamente todos los campos.');\r\n        }\r\n    };\r\n\r\n    const formValido = (): boolean => {\r\n        let valid = true;\r\n\r\n        // Validación de nombres\r\n        if (nombres.trim() === '' || nombres.length < 3 || nombres.length > 15) {\r\n            setErrores((prevState) => ({ ...prevState, nombres: 'Ingrese un nombre válido (entre 3 y 15 caracteres)' }));\r\n            valid = false;\r\n        } else {\r\n            setErrores((prevState) => ({ ...prevState, nombres: '' }));\r\n        }\r\n\r\n        // Validación de apellidos\r\n        if (apellidos.trim() === '' || apellidos.length < 3 || apellidos.length > 15) {\r\n            setErrores((prevState) => ({ ...prevState, apellidos: 'Ingrese un apellido válido (entre 3 y 15 caracteres)' }));\r\n            valid = false;\r\n        } else {\r\n            setErrores((prevState) => ({ ...prevState, apellidos: '' }));\r\n        }\r\n\r\n        // Validación de correo electrónico\r\n        if (!validarCorreo(correo)) {\r\n            setErrores((prevState) => ({ ...prevState, correo: 'Ingrese un correo válido' }));\r\n            valid = false;\r\n        } else {\r\n            setErrores((prevState) => ({ ...prevState, correo: '' }));\r\n        }\r\n\r\n        // Validación de contraseña\r\n        if (contraseña.length < 6) {\r\n            setErrores((prevState) => ({ ...prevState, contraseña: 'La contraseña debe tener al menos 6 caracteres' }));\r\n            valid = false;\r\n        } else {\r\n            setErrores((prevState) => ({ ...prevState, contraseña: '' }));\r\n        }\r\n\r\n        // Validación de confirmación de contraseña\r\n        if (contraseña !== confirmarContraseña) {\r\n            setErrores((prevState) => ({ ...prevState, confirmarContraseña: 'Las contraseñas no coinciden' }));\r\n            valid = false;\r\n        } else {\r\n            setErrores((prevState) => ({ ...prevState, confirmarContraseña: '' }));\r\n        }\r\n\r\n        // Validación de cédula\r\n        if (cedula.trim() === '' || cedula.length !== 10) {\r\n            setErrores((prevState) => ({ ...prevState, cedula: 'Ingrese una cédula válida (10 caracteres)' }));\r\n            valid = false;\r\n        } else {\r\n            setErrores((prevState) => ({ ...prevState, cedula: '' }));\r\n        }\r\n\r\n        // Validación de facultad\r\n        if (facultad.trim() === '' || facultad.length < 3 || facultad.length > 15) {\r\n            setErrores((prevState) => ({ ...prevState, facultad: 'Ingrese una facultad válida (entre 3 y 15 caracteres)' }));\r\n            valid = false;\r\n        } else {\r\n            setErrores((prevState) => ({ ...prevState, facultad: '' }));\r\n        }\r\n\r\n        return valid;\r\n    };\r\n\r\n    // Función para validar el formato del correo electrónico\r\n    const validarCorreo = (correo: string): boolean => {\r\n        // Expresión regular para validar el formato de correo electrónico\r\n        const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        return regex.test(correo);\r\n    };\r\n\r\n    return (\r\n        <section className=\"form-register\">\r\n            <h4>Registro</h4>\r\n            <form onSubmit={handleSubmit}>\r\n                <label htmlFor=\"idnombre\">Nombres</label>\r\n                <input\r\n                    className={`controls ${errores.nombres ? 'invalid' : ''}`}\r\n                    type=\"text\"\r\n                    name=\"Nombres\"\r\n                    id=\"Nombres\"\r\n                    placeholder=\"Ingrese su nombre\"\r\n                    value={nombres}\r\n                    onChange={(e) => setNombres(e.target.value)}\r\n                    required\r\n                />\r\n                {errores.nombres && <p className=\"error-message\">{errores.nombres}</p>}\r\n\r\n                <label htmlFor=\"idapellidos\">Apellidos</label>\r\n                <input\r\n                    className={`controls ${errores.apellidos ? 'invalid' : ''}`}\r\n                    type=\"text\"\r\n                    name=\"Apellidos\"\r\n                    id=\"Apellidos\"\r\n                    placeholder=\"Ingrese su Apellido\"\r\n                    value={apellidos}\r\n                    onChange={(e) => setApellidos(e.target.value)}\r\n                    required\r\n                />\r\n                {errores.apellidos && <p className=\"error-message\">{errores.apellidos}</p>}\r\n\r\n                <label htmlFor=\"idcorreo\">Correo</label>\r\n                <input\r\n                    className={`controls ${errores.correo ? 'invalid' : ''}`}\r\n                    type=\"email\"\r\n                    name=\"Correo\"\r\n                    id=\"Correo\"\r\n                    placeholder=\"Ingrese su Correo\"\r\n                    value={correo}\r\n                    onChange={(e) => setCorreo(e.target.value)}\r\n                    required\r\n                />\r\n                {errores.correo && <p className=\"error-message\">{errores.correo}</p>}\r\n\r\n                <label htmlFor=\"idcontraseña\">Contraseña</label>\r\n                <input\r\n                    className={`controls ${errores.contraseña ? 'invalid' : ''}`}\r\n                    type=\"password\"\r\n                    name=\"Contraseña\"\r\n                    id=\"Contraseña\"\r\n                    placeholder=\"Ingrese su Contraseña\"\r\n                    value={contraseña}\r\n                    onChange={(e) => setContraseña(e.target.value)}\r\n                    required\r\n                />\r\n                {errores.contraseña && <p className=\"error-message\">{errores.contraseña}</p>}\r\n\r\n                <label htmlFor=\"idconfirmarcontraseña\">Confirmar Contraseña</label>\r\n                <input\r\n                    className={`controls ${errores.confirmarContraseña ? 'invalid' : ''}`}\r\n                    type=\"password\"\r\n                    name=\"ConfirmarContraseña\"\r\n                    id=\"ConfirmarContraseña\"\r\n                    placeholder=\"Confirme su Contraseña\"\r\n                    value={confirmarContraseña}\r\n                    onChange={(e) => setConfirmarContraseña(e.target.value)}\r\n                    required\r\n                />\r\n                {errores.confirmarContraseña && <p className=\"error-message\">{errores.confirmarContraseña}</p>}\r\n\r\n                <label htmlFor=\"idcedula\">Cedula</label>\r\n                <input\r\n                    className={`controls ${errores.cedula ? 'invalid' : ''}`}\r\n                    type=\"text\"\r\n                    name=\"Cedula\"\r\n                    id=\"Cedula\"\r\n                    placeholder=\"Ingrese su Cedula\"\r\n                    value={cedula}\r\n                    onChange={(e) => setCedula(e.target.value)}\r\n                    required\r\n                />\r\n                {errores.cedula && <p className=\"error-message\">{errores.cedula}</p>}\r\n\r\n                <label htmlFor=\"idfacultad\">Facultad</label>\r\n                <input\r\n                    className={`controls ${errores.facultad ? 'invalid' : ''}`}\r\n                    type=\"text\"\r\n                    name=\"Facultad\"\r\n                    id=\"Facultad\"\r\n                    placeholder=\"Ingrese su Facultad\"\r\n                    value={facultad}\r\n                    onChange={(e) => setFacultad(e.target.value)}\r\n                    required\r\n                />\r\n                {errores.facultad && <p className=\"error-message\">{errores.facultad}</p>}\r\n\r\n                <p>Estoy de acuerdo <a href=\"https://policies.google.com/terms?hl=es\">Terminos y Condiciones</a></p>\r\n                <input className=\"botons\" type=\"submit\" value=\"Registrar\" />\r\n                <p><a href=\"/\">¿Ya tienes una cuenta?</a></p>\r\n            </form>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n"],"names":["Register","nombres","setNombres","useState","apellidos","setApellidos","correo","setCorreo","contraseña","setContraseña","confirmarContraseña","setConfirmarContraseña","cedula","setCedula","facultad","setFacultad","errores","setErrores","formValido","valid","trim","length","prevState","validarCorreo","test","_jsxs","className","children","_jsx","onSubmit","e","preventDefault","user","localStorage","setItem","JSON","stringify","alert","htmlFor","concat","type","name","id","placeholder","value","onChange","target","required","href"],"sourceRoot":""}